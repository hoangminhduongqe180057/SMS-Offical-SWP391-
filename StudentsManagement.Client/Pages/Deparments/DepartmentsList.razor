@page "/departments-list"
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize]
@using StudentsManagement.Shared.Models
@inject NavigationManager navigation;
@inject IJSRuntime JsRuntime
@rendermode @(new InteractiveServerRenderMode(prerender: false))

<div class="row">
    <div class="col-12">
        <div class="card">
            <div class="card-header">
                <h3 class="card-title">Departments List</h3>
            </div>
            <div class="card-body">
                <div class="row">
                    <p><a class="btn btn-success float-end" href="/add-department">Add New Department</a></p>
                    <div class="col-md-12">
                        <div class="card">
                            <div class="card-header"></div>
                            @if (departments == null)
                            {
                                <p><em>Loading Departments...</em></p>
                            }
                            else if (!departments.Items.Any())
                            {
                                <div class="alert alert-info"> There is no Department List Available</div>
                            }
                            else
                            {
                                <div class="card-body">
                                    <table class="table table-striped table-hover">
                                        <thead>
                                            <tr>
                                                <th>Id</th>
                                                <th>Department Code</th>
                                                <th>Department Name</th>
                                                <th>Created By</th>
                                                <th>Created On</th>
                                                <th>View</th>
                                                <th>Edit</th>
                                                <th>Delete</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            @foreach (var department in departments.Items)
                                            {
                                                <tr>
                                                    <td>@department.Id</td>
                                                    <td>@department.Code</td>
                                                    <td>@department.Name</td>
                                                    <td>@department.CreatedById</td>
                                                    <td>@department.CreatedOn.ToShortDateString()</td>
                                                    <td>
                                                        <a class="btn btn-primary" href="/department/detail/@department.Id"> View </a>
                                                    </td>
                                                    <td>
                                                        <a class="btn btn-success" href="/department/edit/@department.Id"> Edit </a>
                                                    </td>
                                                    <td>
                                                        <a class="btn btn-danger" @onclick="() => DeleteDepartment(department.Id)"> Delete </a>
                                                    </td>
                                                </tr>
                                            }
                                        </tbody>
                                    </table>
                                    <!-- Pagination Controls -->
                                    <div class="button-group mt-3">
                                        <button class="btn btn-custom" @onclick="PreviousPage" style="@GetButtonStyle(!CanGoToPreviousPage)">Previous</button>
                                        <button class="btn btn-custom ms-2" @onclick="NextPage" style="@GetButtonStyle(!CanGoToNextPage)">Next</button>
                                    </div>
                                    <p class="mt-2">Page @departments.CurrentPage of @departments.TotalPages</p>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private PaginationModel<Department>? departments;
    private int currentPage = 1;
    private int pageSize = 10;

    protected override async Task OnInitializedAsync()
    {
        await LoadPagedDepartments(currentPage);
    }

    private async Task LoadPagedDepartments(int page)
    {
        departments = await DepartmentService.GetPagedDepartmentsAsync(page, pageSize);
    }

    private async Task NextPage()
    {
        if (CanGoToNextPage)
        {
            currentPage++;
            await LoadPagedDepartments(currentPage);
        }
    }

    private async Task PreviousPage()
    {
        if (CanGoToPreviousPage)
        {
            currentPage--;
            await LoadPagedDepartments(currentPage);
        }
    }

    private string GetButtonStyle(bool isInactive)
    {
        return isInactive ? "opacity: 0.6; pointer-events: none;" : "";
    }

    private bool CanGoToPreviousPage => departments?.CurrentPage > 1;
    private bool CanGoToNextPage => departments?.CurrentPage < departments?.TotalPages;

    private async Task DeleteDepartment(int id)
    {
        bool confirm = await JsRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to delete?");
        if (confirm)
        {
            var department = await DepartmentService.DeleteAsync(id);
            bool result = department != null;
            if (result)
            {
                await LoadPagedDepartments(currentPage);
            }
        }
    }
}
