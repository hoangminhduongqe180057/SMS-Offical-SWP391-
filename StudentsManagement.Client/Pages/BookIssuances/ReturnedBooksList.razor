@page "/returnedBooks-list"
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize]
@using StudentsManagement.Shared.Models
@inject NavigationManager navigation;
@inject IJSRuntime JsRuntime
@rendermode @(new InteractiveServerRenderMode(prerender: false))

<div class="row">
    <div class="col-12">
        <div class="card">
            <div class="card-header">
                <h3 class="card-title">Returned Book History</h3>
            </div>
            <div class="card-body">
                <div class="row">
                    <div class="col-md-12">
                        <div class="card">
                            <div class="card-header"></div>
                            @if (PagedBookReturned == null)
                            {
                                <p><em>Loading Returned Book...</em></p>
                            }
                            else if (!PagedBookReturned.Items.Any())
                            {
                                <div class="alert alert-info"> There is no Returned Book List Available</div>
                            }
                            else
                            {
                                <div class="card-body">
                                    <table class="table table-striped table-hover">
                                        <thead>
                                            <tr>
                                                <th>Id</th>
                                                <th>Book Name</th>
                                                <th>Issue Date</th>
                                                <th>Due Date</th>
                                                <th>Student Name</th>
                                                <th>Return Date</th>
                                                <th>Status</th>
                                                <th>Delete</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            @foreach (var book in PagedBookReturned.Items)
                                            {
                                                <tr>
                                                    <td>@book.Id</td>
                                                    <td>@book.Book?.Name</td>
                                                    <td>@book.IssueDate.ToShortDateString()</td>
                                                    <td>@book.DueDate.ToShortDateString()</td>
                                                    <td>@book.Student?.FullName</td>
                                                    <td>@book.ReturnDate?.ToShortDateString()</td>
                                                    <td class="text-warning">@book.Status?.Code</td>
                                                    <td>
                                                        <a class="btn btn-danger" @onclick="() => DeleteBook(book.Id)"> Delete </a>
                                                    </td>
                                                </tr>
                                            }
                                        </tbody>
                                    </table>
                                    <!-- Pagination Controls -->
                                    <div class="button-group mt-3">
                                        <button class="btn btn-custom" @onclick="PreviousPage" style="@GetButtonStyle(!CanGoToPreviousPage)">Previous</button>
                                        <button class="btn btn-custom ms-2" @onclick="NextPage" style="@GetButtonStyle(!CanGoToNextPage)">Next</button>
                                    </div>
                                    <p class="mt-2">Page @PagedBookReturned.CurrentPage of @PagedBookReturned.TotalPages</p>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
@code {
    public PaginationModel<BookIssuance>? PagedBookReturned;
    public int CurrentPage = 1;
    public int PageSize = 10;

    protected override async Task OnInitializedAsync()
    {
        await LoadPagedBookReturned(CurrentPage);
    }

    private async Task LoadPagedBookReturned(int page)
    {
        PagedBookReturned = await BookIssuanceService.GetPagedBookReturnedAsync(page, PageSize);
    }

    // Next page
    public async Task NextPage()
    {
        if (CanGoToNextPage)
        {
            CurrentPage++;
            await LoadPagedBookReturned(CurrentPage);
        }
    }

    // Previous page
    public async Task PreviousPage()
    {
        if (CanGoToPreviousPage)
        {
            CurrentPage--;
            await LoadPagedBookReturned(CurrentPage);
        }
    }

    private string GetButtonStyle(bool isInactive)
    {
        return isInactive ? "opacity: 0.6; pointer-events: none;" : "";
    }

    // Kiểm tra điều kiện để kích hoạt nút phân trang
    private bool CanGoToPreviousPage => PagedBookReturned?.CurrentPage > 1;
    private bool CanGoToNextPage => PagedBookReturned?.CurrentPage < PagedBookReturned?.TotalPages;

    // Phương thức xóa Returned Book
    private async Task DeleteBook(int id)
    {
        var confirmed = await JsRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this returned book?");
        if (confirmed)
        {
            var returnBook = await BookIssuanceService.DeleteAsync(id);
            bool result = returnBook != null;
            if (result)
            {
                await LoadPagedBookReturned(CurrentPage);
            }
            else
            {
                await JsRuntime.InvokeVoidAsync("alert", "Failed to delete the returned book.");
            }
        }
    }


    // public async Task LoadAllBookIssuances()
    // {
    //     var data = await BookIssuanceService.GetAllAsync();
    //     var returnedBook = data.Where(x => x.ReturnDate.HasValue && x.ReturnDate.Value != DateTime.MinValue).ToList();

    //     Phân trang trên client-side
    //     PagedBookReturned.TotalItems = returnedBook.Count;
    //     PagedBookReturned.CurrentPage = CurrentPage;
    //     PagedBookReturned.PageSize = PageSize;
    //     PagedBookReturned.Items = returnedBook
    //         .Skip((CurrentPage - 1) * PageSize)
    //         .Take(PageSize)
    //         .ToList();
    // }
}


