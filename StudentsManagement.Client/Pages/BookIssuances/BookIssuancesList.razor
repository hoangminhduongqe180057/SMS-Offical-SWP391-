@page "/bookIssuances-list"
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize]
@using StudentsManagement.Shared.Models
@inject NavigationManager navigation;
@inject IJSRuntime JsRuntime
@rendermode @(new InteractiveServerRenderMode(prerender: false))

<div class="row">
    <div class="col-12">
        <div class="card">
            <div class="card-header">
                <h3 class="card-title">Book Issuances List</h3>
            </div>
            <div class="card-body">
                <div class="row">
                    <p><a class="btn btn-success float-end" href="/add-bookIssuance">Add New Book Issuance</a></p>
                    <div class="col-md-12">
                        <div class="card">
                            <div class="card-header"></div>
                            @if (bookIssuances == null)
                            {
                                <p><em>Loading Book Issuances...</em></p>
                            }
                            else if (!bookIssuances.Items.Any())
                            {
                                <div class="alert alert-info"> There is no Book Issuance List Available</div>
                            }
                            else
                            {
                                <div class="card-body">
                                    <table class="table table-striped table-hover">
                                        <thead>
                                            <tr>
                                                <th>Id</th>
                                                <th>Book Name</th>
                                                <th>Issue Date</th>
                                                <th>Due Date</th>
                                                <th>Class Name</th>
                                                <th>Student Name</th>
                                                <th>Status</th>
                                                <th>View</th>
                                                <th>Edit</th>
                                                <th>Return</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            @foreach (var bookIssuance in bookIssuances.Items)
                                            {
                                                <tr>
                                                    <td>@bookIssuance.Id</td>
                                                    <td>@bookIssuance.Book?.Name</td>
                                                    <td>@bookIssuance.IssueDate.ToShortDateString()</td>
                                                    <td>@bookIssuance.DueDate.ToShortDateString()</td>
                                                    <td>@bookIssuance.Class?.Description</td>
                                                    <td>@bookIssuance.Student?.FullName</td>
                                                    <td class="text-success">@bookIssuance.Status?.Code</td>
                                                    <td>
                                                        <a class="btn btn-primary" href="/bookIssuance/detail/@bookIssuance.Id"> View </a>
                                                    </td>
                                                    <td>
                                                        <a class="btn btn-success" href="/bookIssuance/edit/@bookIssuance.Id"> Edit </a>
                                                    </td>

                                                    <td>
                                                        <a class="btn btn-warning" href="/returnBook/edit/@bookIssuance.Id"> Return </a>
                                                    </td>

                                                </tr>
                                            }
                                        </tbody>
                                    </table>
                                    <!-- Pagination Controls -->
                                    <div class="button-group mt-3">
                                        <button class="btn btn-custom" @onclick="PreviousPage" style="@GetButtonStyle(!CanGoToPreviousPage)">Previous</button>
                                        <button class="btn btn-custom ms-2" @onclick="NextPage" style="@GetButtonStyle(!CanGoToNextPage)">Next</button>
                                    </div>
                                    <p class="mt-2">Page @bookIssuances.CurrentPage of @bookIssuances.TotalPages</p>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private PaginationModel<BookIssuance>? bookIssuances;
    private int currentPage = 1;
    private int pageSize = 10;

    protected override async Task OnInitializedAsync()
    {
        await LoadPagedBookIssuances(currentPage);
    }

    private async Task LoadPagedBookIssuances(int page)
    {
        bookIssuances = await BookIssuanceService.GetPagedBookIssuancesAsync(page, pageSize);
    }

    private async Task NextPage()
    {
        if (CanGoToNextPage)
        {
            currentPage++;
            await LoadPagedBookIssuances(currentPage);
        }
    }

    private async Task PreviousPage()
    {
        if (CanGoToPreviousPage)
        {
            currentPage--;
            await LoadPagedBookIssuances(currentPage);
        }
    }

    private string GetButtonStyle(bool isInactive)
    {
        return isInactive ? "opacity: 0.6; pointer-events: none;" : "";
    }

    private bool CanGoToPreviousPage => bookIssuances?.CurrentPage > 1;
    private bool CanGoToNextPage => bookIssuances?.CurrentPage < bookIssuances?.TotalPages;

    // private async Task ReturnBookIssuance(BookIssuance book)
    // {
    //     var confirmed = await JsRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to return book?");
    //     if (confirmed)
    //     {
    //         var country = await BookIssuanceService.ReturnBookUpdateAsync(book);
    //         bool result = country != null;
    //         if (result)
    //         {
    //             await LoadPagedBookIssuances(currentPage);
    //         }
    //     }
    // }
}