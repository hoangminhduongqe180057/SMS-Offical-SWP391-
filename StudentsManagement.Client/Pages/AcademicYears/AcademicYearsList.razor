@page "/academicYears-list"
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize]
@using StudentsManagement.Shared.Models
@inject NavigationManager navigation;
@inject IJSRuntime JsRuntime
@rendermode @(new InteractiveServerRenderMode(prerender: false))

<div class="row">
    <div class="col-12">
        <div class="card">
            <div class="card-header">
                <h3 class="card-title">Academic Years List</h3>
            </div>
            <div class="card-body">
                <div class="row">
                    <p><a class="btn btn-success float-end" href="/add-academicYear">Add New Academic Year</a></p>
                    <div class="col-md-12">
                        <div class="card">
                            <div class="card-header"></div>
                            @if (academicyears == null)
                            {
                                <p><em>Loading Academic Years...</em></p>
                            }
                            else if (!academicyears.Items.Any())
                            {
                                <div class="alert alert-info"> There is no Academic Year List Available</div>
                            }
                            else
                            {
                                <div class="card-body">
                                    <table class="table table-striped table-hover">
                                        <thead>
                                            <tr>
                                                <th>Id</th>
                                                <th>Name</th>
                                                <th>Start Date</th>
                                                <th>End Date</th>
                                                <th>Status</th>
                                                <th>View</th>
                                                <th>Edit</th>
                                                <th>Delete</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            @foreach (var academic in academicyears.Items)
                                            {
                                                <tr>
                                                    <td>@academic.Id</td>
                                                    <td>@academic.Name</td>
                                                    <td>@academic.StartDate.ToShortDateString()</td>
                                                    <td>@academic.EndDate.ToShortDateString()</td>
                                                    @if (@academic.Status == "Active")
                                                    {
                                                        <td class="text-success">@academic.Status</td>
                                                    }else{
                                                        <td class="text-warning">@academic.Status</td>
                                                    }
                                                    
                                                    <td>
                                                        <a class="btn btn-primary" href="/academicYear/detail/@academic.Id"> View </a>
                                                    </td>
                                                    <td>
                                                        <a class="btn btn-success" href="/academicYear/edit/@academic.Id"> Edit </a>
                                                    </td>
                                                    <td>
                                                        <a class="btn btn-danger" @onclick="() => ConfirmDelete(academic.Id)"> Delete </a>
                                                    </td>
                                                </tr>
                                            }
                                        </tbody>
                                    </table>
                                    <!-- Pagination Controls -->
                                    <div class="button-group mt-3">
                                        <button class="btn btn-custom" @onclick="PreviousPage" style="@GetButtonStyle(!CanGoToPreviousPage)">Previous</button>
                                        <button class="btn btn-custom ms-2" @onclick="NextPage" style="@GetButtonStyle(!CanGoToNextPage)">Next</button>
                                    </div>
                                    <p class="mt-2">Page @academicyears.CurrentPage of @academicyears.TotalPages</p>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private PaginationModel<AcademicYears>? academicyears;
    private int currentPage = 1;
    private int pageSize = 10;

    protected override async Task OnInitializedAsync()
    {
        await LoadPagedAcademicYears(currentPage);
    }

    private async Task LoadPagedAcademicYears(int page)
    {
        academicyears = await AcademicYearService.GetPagedAcademicYearsAsync(page, pageSize);
    }

    private async Task NextPage()
    {
        if (CanGoToNextPage)
        {
            currentPage++;
            await LoadPagedAcademicYears(currentPage);
        }
    }

    private async Task PreviousPage()
    {
        if (CanGoToPreviousPage)
        {
            currentPage--;
            await LoadPagedAcademicYears(currentPage);
        }
    }

    private string GetButtonStyle(bool isInactive)
    {
        return isInactive ? "opacity: 0.6; pointer-events: none;" : "";
    }

    private bool CanGoToPreviousPage => academicyears?.CurrentPage > 1;
    private bool CanGoToNextPage => academicyears?.CurrentPage < academicyears?.TotalPages;

    private async Task DeleteAcademicYear(int id)
    {
        var academicYear = await AcademicYearService.GetByIdAsync(id);
        bool result = academicYear != null;
        if (result)
        {
            await LoadPagedAcademicYears(currentPage);
        }
    }

    private async Task ConfirmDelete(int id)
    {
        bool confirm = await JsRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to delete?");
        if (confirm)
        {
            await DeleteAcademicYear(id);
        }
    }

    
}
