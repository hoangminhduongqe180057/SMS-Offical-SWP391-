@page "/Account/RegisterConfirmation"

@using System.Text
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using StudentsManagement.Data

@inject UserManager<ApplicationUser> UserManager
@inject IEmailSender<ApplicationUser> EmailSender
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Registration Pending Approval</PageTitle>

<div class="container h-100 d-flex justify-content-center align-items-center">
    <div class="card shadow-lg border-0 rounded-lg p-4" style="max-width: 600px; background: linear-gradient(145deg, #E0F7FA, #B2EBF2); box-shadow: 0px 10px 20px rgba(0, 0, 0, 0.15);">
        <div class="text-center">
            <img src="https://cdn-icons-png.flaticon.com/512/2088/2088617.png" alt="Clock Icon" width="100" height="100" class="mb-3" />
            <h3 class="text-dark" style="color: #0D47A1;">Your Registration is Being Reviewed</h3>
            <p class="mt-3" style="color: #01579B;">
                Thank you for registering! Your account is currently under review by our administration team. We are working to approve your registration as soon as possible.
            </p>
            <p style="color: #01579B;">
                You will receive an email notification once your account has been approved and activated. We appreciate your patience in the meantime.
            </p>
            <!-- Chuyển từ nút bấm thành thẻ <a> để điều hướng trực tiếp -->
            <a class="btn btn-lg mt-4" style="background-color: #4CAF50; color: white; border-color: #4CAF50;" href="/Account/Login">
                Return to Login
            </a>
        </div>
    </div>
</div>

@code {
    private string? emailConfirmationLink;
    private string? statusMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromQuery]
    private string? Email { get; set; }

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (Email is null)
        {
            RedirectManager.RedirectTo("");
        }

        var user = await UserManager.FindByEmailAsync(Email);
        if (user is null)
        {
            HttpContext.Response.StatusCode = StatusCodes.Status404NotFound;
            statusMessage = "Error finding user for unspecified email";
        }
        else if (EmailSender is IdentityNoOpEmailSender)
        {
            // Once you add a real email sender, you should remove this code that lets you confirm the account
            var userId = await UserManager.GetUserIdAsync(user);
            var code = await UserManager.GenerateEmailConfirmationTokenAsync(user);
            code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
            emailConfirmationLink = NavigationManager.GetUriWithQueryParameters(
                NavigationManager.ToAbsoluteUri("Account/ConfirmEmail").AbsoluteUri,
                new Dictionary<string, object?> { ["userId"] = userId, ["code"] = code, ["returnUrl"] = ReturnUrl });
        }
    }

    private void RedirectToHome()
    {
        NavigationManager.NavigateTo("Account/Login");
    }
}
